module DC where
open import Agda.Primitive using (Level; _‚äî_; lsuc)
open import CatLib using (Category;module Finitely; module BinaryProducts; module Cartesian; module Pullback; module ObjectProduct)
open import Cubical.Core.Everything using (_‚â°_)

-- Assuming a Category ùíû... 
module _ {o ‚Ñì : Level}(ùíû : Category o ‚Ñì)where 
    open Category ùíû
    open Finitely ùíû using (FinitelyComplete)
    -- ... that is Finitely Complete
    module foo {fin : FinitelyComplete} where 
        open FinitelyComplete fin using (cartesian; pullback)
        open Cartesian ùíû using (CartesianT)
        open Pullback ùíû using (PullbackT ; IsPullback)
        open PullbackT
        open CartesianT cartesian using (products)
        open BinaryProducts ùíû using(BinaryProductsT)
        open BinaryProductsT products using (_√ó_; product)
        open ObjectProduct ùíû using (module Morphisms; Product)
  
        -- Definition of Objects in DC
        record Obj : Set (o ‚äî ‚Ñì) where 
            field 
                {A} {U} {X} : Ob    
                Œ± : A ‚áí (U √ó X)
                is-monic : ‚àÄ {C} ‚Üí (g‚ÇÅ g‚ÇÇ : C ‚áí A) ‚Üí Œ± ‚àò g‚ÇÅ ‚â° Œ± ‚àò g‚ÇÇ ‚Üí g‚ÇÅ ‚â° g‚ÇÇ

        open Morphisms
        open Product

        -- Definition of morphisms in DC...
        record Hom (A B : Obj) : Set (o ‚äî ‚Ñì) where 
            open Obj A
            open Obj B renaming (A to B; U to V; X to Y; Œ± to Œ≤)
            -- .. Consist of two maps f, F
            field
                f : U ‚áí V 
                F : (U √ó Y) ‚áí X
           
            œÄ‚ÇÅ√óF : (U √ó Y) ‚áí (U √ó X)
            œÄ‚ÇÅ√óF = [ product¬†]‚ü® œÄ‚ÇÅ product , F ‚ü©

            f√óY : (U √ó Y) ‚áí (V √ó Y)
            f√óY = [ product ‚áí product ] f √ó id

            -- taking the pullback of a and œÄ‚ÇÅ√óF 
            open PullbackT (pullback Œ± œÄ‚ÇÅ√óF) renaming (P to A'; p‚ÇÇ to Œ±')
            -- taking the pullback of f√óY and Œ≤
            open PullbackT (pullback f√óY Œ≤) renaming (P to B'; p‚ÇÅ to Œ≤')
            -- Œ±' and Œ≤' should be monic

            -- Diagram on page 3 of Valeria's Thesis
            field   
                -- k should be unique, missing this condition
                k : A' ‚áí B'
                k-cond : Œ≤' ‚àò k ‚â° Œ±'

        open Hom
        
        -- f : U ‚áí U
        -- F : U √ó X ‚áí X
        DCid : {X : Obj} ‚Üí Hom X X
        DCid .f = id
        DCid .F = œÄ‚ÇÇ product
        DCid .k = {! id  !}
            where 
                _  = [ {!   !} ‚áí {!   !} ] {!   !} √ó id
        DCid .k-cond = {!   !}
        {- id object diagram
                       A'  ---->  A
                       |          |
                       |          |
                       |          |
            A' ----> U x X ----> U √ó X
            |          |
            |          |
            |          |
            A  ----> U √ó X
        -}

        _√ó‚Çö_ : (A B : Ob) ‚Üí Product A B 
        A √ó‚Çö B = product

        Œî : ‚àÄ (X : Ob) ‚Üí X ‚áí (X √ó X)
        Œî X = [ X √ó‚Çö X ]‚ü® id , id ‚ü©

        -- Something about using the context of the metalanguage here.. 
        swap : ‚àÄ {X Y : Ob} ‚Üí (X √ó Y) ‚áí (Y √ó X)
        swap {X} {Y} = [ p ]‚ü® œÄ‚ÇÇ p , œÄ‚ÇÅ p ‚ü©
        --([ p ‚áí p ] œÄ‚ÇÇ p √ó œÄ‚ÇÅ p) ‚àò Œî (X √ó Y)
            where
                p = product
        --([ ((X √ó Y) √ó‚Çö (X √ó Y)) ‚áí (Y √ó‚Çö X) ] œÄ‚ÇÇ (X √ó‚Çö Y) √ó œÄ‚ÇÅ (X √ó‚Çö Y)) ‚àò Œî (X √ó Y)

        -- This is a bit of trickery
        -- Since ùíû has aribitrary products, we can form products from any objects of ùíû
        -- here p is infered to be different product objects.. the projection maps just guide the typing
        shuffle : ‚àÄ {X Y Z : Ob} ‚Üí (( X √ó Y) √ó Z) ‚áí (X √ó (Y √ó Z))
        shuffle {X} {Y} {Z} = [ p ]‚ü® œÄ‚ÇÅ p ‚àò œÄ‚ÇÅ p , [ p ]‚ü® œÄ‚ÇÇ p ‚àò œÄ‚ÇÅ p , œÄ‚ÇÇ p ‚ü© ‚ü©
            where 
                p = product


        _‚àòDC_ : {A B C : Obj} ‚Üí Hom B C ‚Üí Hom A B ‚Üí Hom A C 
        _‚àòDC_ g f .f = Hom.f g ‚àò Hom.f f
        _‚àòDC_ {A}{B}{C} g f .F = ((Hom.F f ‚àò U√óG) ‚àò U√óf√óZ) ‚àò Œî√óZ
            where
                open Obj A using (U; X)
                open Obj B renaming (U to V; X to Y)
                open Obj C renaming (U to W; X to Z) 
                p = product 

                Œî√óZ : (U √ó Z) ‚áí ((U √ó U) √ó Z)
                Œî√óZ = [ p ‚áí p ] Œî U √ó id

                U√óf√óZ : (( U √ó U) √ó Z) ‚áí (U √ó (V √ó Z))
                U√óf√óZ = ([ p ‚áí p ] id √ó ([ p ‚áí p ] Hom.f f √ó id)) ‚àò shuffle
                
                U√óG : (U √ó (V √ó Z)) ‚áí (U √ó Y)
                U√óG = [ p ‚áí p ] id √ó Hom.F g
                
        _‚àòDC_ g f .k = {!   !}
        _‚àòDC_ g f .k-cond = {!   !}
    
        -- now try to make a category out of this...
        open import Cubical.Foundations.Isomorphism using (isoToPath; iso ; Iso)
        open import Cubical.Foundations.Prelude using (_‚â°‚ü®_‚ü©_;‚â°‚ü®‚ü©-syntax;_‚àé;cong;cong‚ÇÇ;refl; transport; sym)

        module HomEq where
            Hom‚â° : ‚àÄ{A B : Obj}{m‚ÇÅ m‚ÇÇ : Hom A B} ‚Üí f m‚ÇÅ ‚â° f m‚ÇÇ ‚Üí F m‚ÇÅ ‚â° F m‚ÇÇ ‚Üí {!   !}
            Hom‚â° = {!   !}

        DC : Category (o ‚äî ‚Ñì) (o ‚äî ‚Ñì) 
        DC .Ob = Obj
        DC ._‚áí_ = Hom 
        DC .id = DCid
        DC ._‚àò_ = _‚àòDC_
        DC .idr = {!   !}
        DC .idl = {!   !}
        DC .assoc = {!   !}






{-
kruft. old start to the proofs required to show DC is a category

        open Hom
        open import Cubical.Foundations.Isomorphism using (isoToPath; iso ; Iso)
        open import Cubical.Foundations.Prelude using (_‚â°‚ü®_‚ü©_;‚â°‚ü®‚ü©-syntax;_‚àé;cong;cong‚ÇÇ;refl; transport; sym)
        open Iso
        open IsPullback

        module lemmas where 


            ispbsym : {P X Y Z : Ob} ‚Üí (p‚ÇÅ : P ‚áí X) ‚Üí (p‚ÇÇ : P ‚áí Y) ‚Üí (f : X ‚áí Z) ‚Üí (g : Y ‚áí Z) ‚Üí 
                IsPullback p‚ÇÅ p‚ÇÇ f g ‚â° IsPullback p‚ÇÇ p‚ÇÅ g f 
            ispbsym p‚ÇÅ p‚ÇÇ f g = isoToPath prf
                where prf : Iso (IsPullback p‚ÇÅ p‚ÇÇ f g) (IsPullback p‚ÇÇ p‚ÇÅ g f)
                      prf .fun ispb = record
                                        { commute = sym (ispb .commute)
                                        ; universal = Œª x ‚Üí (ispb  .universal) (sym x)
                                        ; unique = Œª x y ‚Üí ispb .unique y x
                                        {- 
                                        {h‚ÇÇ.A : Ob} {h‚ÇÅ : h‚ÇÇ.A ‚áí X} {h‚ÇÇ : h‚ÇÇ.A ‚áí Y} {eq : f ‚àò h‚ÇÅ ‚â° g ‚àò h‚ÇÇ} ‚Üí
                                        p‚ÇÅ ‚àò Pullback.IsPullback.universal ispb eq ‚â° h‚ÇÅ

                                        {h‚ÇÇ.A : Ob} {h‚ÇÅ : h‚ÇÇ.A ‚áí Y} {h‚ÇÇ : h‚ÇÇ.A ‚áí X}{eq : g ‚àò h‚ÇÅ ‚â° f ‚àò h‚ÇÇ} ‚Üí
                                        p‚ÇÇ ‚àò ispb .Pullback.IsPullback.universal (Œª i ‚Üí eq (Cubical.Foundations.Prelude.~ i)) ‚â° h‚ÇÅ
                                        
                                        -}
                                        ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {! refl!}
                                        ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                        }
                      prf .inv ispb = record
                                        { commute = sym (ispb .commute)
                                        ; universal = Œª x ‚Üí (ispb  .universal) (sym x)
                                        ; unique = Œª x y ‚Üí ispb .unique y x
                                        ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {!   !}
                                        ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                        }
                      prf .rightInv = Œª b ‚Üí {!   !}
                      prf .leftInv = Œª b ‚Üí {!   !}

            -- correct notion of equality... probably not
            pbsym : {X Y Z : Ob} ‚Üí (f : X ‚áí Z) ‚Üí (g : Y ‚áí Z) ‚Üí PullbackT f g ‚â° PullbackT g f
            pbsym f g = isoToPath isoprf 
                where isoprf : Iso (PullbackT f g) (PullbackT g f)
                      isoprf .fun pb‚ÇÅ = record { p‚ÇÅ = pb‚ÇÅ .p‚ÇÇ ; p‚ÇÇ = pb‚ÇÅ .p‚ÇÅ ; isPullback = 
                                         record
                                            { commute = sym ((pb‚ÇÅ .isPullback) .commute)
                                            ; universal = Œª x ‚Üí {!   !}
                                            ; unique = {!   !}
                                            ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {!   !}
                                            ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                            } }
                      isoprf .inv pb‚ÇÇ = record { p‚ÇÅ = pb‚ÇÇ .p‚ÇÇ ; p‚ÇÇ = pb‚ÇÇ .p‚ÇÅ ; isPullback = {!   !} }
                      isoprf .rightInv = {!   !}
                      isoprf .leftInv = {!   !}
-}




            
            

        

    

   